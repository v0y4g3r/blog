<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rust on Tokamako</title>
    <link>https://huanglei.rocks/tags/rust/</link>
    <description>Recent content in Rust on Tokamako</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sat, 29 Jan 2022 22:41:37 +0800</lastBuildDate><atom:link href="https://huanglei.rocks/tags/rust/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>理解 Rust 的 Pin 机制</title>
      <link>https://huanglei.rocks/posts/rust-pinning/</link>
      <pubDate>Sat, 29 Jan 2022 22:41:37 +0800</pubDate>
      
      <guid>https://huanglei.rocks/posts/rust-pinning/</guid>
      <description>Pin 之所以难以理解，是因为其是同时涉及到移动语义、所有权、异步的一个概念。可以说，Pin 是为了解决自引用数据结构的移动问题，而这个问题在 Rust 的基</description>
    </item>
    
    <item>
      <title>Rust 对象安全详解</title>
      <link>https://huanglei.rocks/posts/object-safety/</link>
      <pubDate>Thu, 09 Dec 2021 21:57:33 +0800</pubDate>
      
      <guid>https://huanglei.rocks/posts/object-safety/</guid>
      <description>Rust 的 RFC 上只给出了 object-safety 的定义，但是没有解释为何在满足这些条件的时候 trait 是 object safe 的，以及为啥需要 object safety，这反而是初学者最为困惑的点。 为什么需要</description>
    </item>
    
  </channel>
</rss>
